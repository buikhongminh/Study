# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  # build-and-test:
  #   # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
  #   # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # Be sure to update the Docker image tag below to openjdk version of your application.
  #   # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
  #   docker:
  #     - image: cimg/base:2020.01
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     # Checkout the code as the first step.
  #     - checkout
  #     # Use mvn clean and package as the standard maven build phase
  #     - run:
  #         name: Build
  #         command: mvn -B -DskipTests clean package
  #     # Then run your tests!
  #     - run:
  #         name: Test
  #         command: mvn test
  #      - run: # print the name of the branch we're on
  #         name: "What branch am I on?"
  #         command: echo ${CIRCLE_BRANCH}
  # print_hello:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo hello
  # print_world:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo world
  # build:
  #   docker:
  #     - image: cimg/base:2020.01
  #   steps:
  #     - checkout
  #     - run:
  #         name: "echo an env var that is part of our project"
  #         command: |
  #           echo $MY_ENV_VAR  
  # print_branch:
  #   docker:
  #     - image: cimg/base:2020.01
  #   steps:
  #     - checkout
  #     - run: 
  #          name: "What branch am I on?"
  #          command: echo ${CIRCLE_BRANCH}
  #=======================================
  # save_hello_world_output:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "this exercide:sharing file" > ~/output.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - output.txt
  # print_output_file:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     - run: cat ~/output.txt  
  #===================================
  # my_job:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - print_pipeline_id
#=====================================
  my_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "this exercide:sharing file"
      - run: 
          name: on error
          command: echo "Hello error"
          when: on_fail

workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
        - my_job
  
